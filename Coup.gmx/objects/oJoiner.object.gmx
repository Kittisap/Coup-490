<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Coins = 2;

MyTurn = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Network Event Triggered Client Side");
var recvSocket = ds_map_find_value(async_load, "id");
if (recvSocket == Socket)
{  
var type_event = ds_map_find_value(async_load, "type");
// Check to see if it's a network_type_data
if (type_event == network_type_data){

    // Begin to read from the buffer
    var buffer = ds_map_find_value(async_load, "buffer");
    buffer_seek(buffer, buffer_seek_start, 0);
        
    // Read the message id. What should the client do?
    var msgid = buffer_read(buffer, buffer_string);

    // List of message IDs:
    // GEN == General Action
    //      INC == Income
    //      FOR == Foriegn Aid
    //      CUP = Coup
    // INF == Influence
    //      ASS == Assassin
    //      AMB == Ambassador
    //      CAP == Captain
    //      CON == Contessa
    //      DUK == Duke
    // CAT == CounterAttack
    // ALL == Allow
    // CHA == Challenged
    switch (msgid){
    case "GEN":
        show_debug_message("General Action Initiated");
        var initPlayer = buffer_read(buffer, buffer_u8);
        var subAction = buffer_read(buffer, buffer_string);
        var targetPlayer = buffer_read(buffer, buffer_u8);

        break;
    
    case "INF":
        show_debug_message("Influence Action Initiated");
        var initPlayer = buffer_read(buffer, buffer_u8);
        var subAction = buffer_read(buffer, buffer_string);
        var targetPlayer = buffer_read(buffer, buffer_u8);
        // Read the runes.
        switch (subAction){
        
            case "AMB":
                show_debug_message("Ambassador action selected");
                //execute action
            case "ASS":
                show_debug_message("Assassin action selected");
                //execute action
            case "CAP":
                show_debug_message("Captain action selected");
                //execute action
            case "CON":
                show_debug_message("Contessa action selected");
                //execute action
            case "DUK":
                show_debug_message("Duke action selected");
                //execute action
        break;
        
    case "CAT":
        show_debug_message("Counter-attack Initiated");
        var initPlayer = buffer_read(buffer, buffer_u8);
        var subAction = buffer_read(buffer, buffer_string);
        var targetPlayer = buffer_read(buffer, buffer_u8);
        // Read the event ID
        var event = buffer_read(buffer, buffer_u8);
        
        // Script to do the Special Event
        scr_ClientSpecialEvent(event);
        break;
        
    case "ALL":
        // Read the buffer
        show_debug_message("Action Allowed");
        var initPlayer = buffer_read(buffer, buffer_u8);
        var subAction = buffer_read(buffer, buffer_string);
        var targetPlayer = buffer_read(buffer, buffer_u8);
        break;
        
    case "CHA":
        show_debug_message("Challenge Started");
        var initPlayer = buffer_read(buffer, buffer_u8);
        var subAction = buffer_read(buffer, buffer_string);
        var targetPlayer = buffer_read(buffer, buffer_u8);
        
        break;
        

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
